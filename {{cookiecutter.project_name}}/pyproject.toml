[project]
name = "{{cookiecutter.project_name}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = [{ name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.8,<4.0"

[project.urls]
Homepage = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"
Repository = "https://github.com/{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}"
Documentation = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"

[tool.uv]
dev-dependencies = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    {% if cookiecutter.deptry == 'y' %}"deptry>=0.20.0",{% endif %}
    "mypy>=0.991",
    {% if cookiecutter.codecov == 'y' %}"pytest-cov>=4.0.0",{% endif %}
    "ruff>=0.0.235",
    {% if cookiecutter.mkdocs == 'y' %}"mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.19.0",{% endif %}
]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.mypy]
files = ["{{cookiecutter.project_slug}}"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py311"
extend-exclude = ["__init__.py"]
line-length = 120
fix = true
show-fixes = true

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true
preview = true

[tool.ruff.lint]
select = [
    "F",                            # pyflakes                      | Check for errors
    "E", "W",                       # pycodestyle                   | Some of the style conventions in PEP 8
    "C90",                          # mccabe                        | Cyclomatic complexity
    "I",                            # isort                         | Sort imports
    "N",                            # pep8-naming                   | PEP 8 naming conventions
    "D", "D204", "D400", "D401",    # pydocstyle                    | Docstring conventions
    "UP",                           # pyupgrade                     | Upgrade syntax for newer versions of the language
    "YTT",                          # flake8-2020                   | Misuse of sys.version or sys.version_info
    "ANN",                          # flake8-annotations            | PEP 3107-style function annotations
    "S",                            # flake8-bandit                 | Security testing
    "BLE",                          # flake8-blind-except           | Do not catch all exceptions
    "FBT",                          # flake8-boolean-trap           | "Boolean Trap" antipattern
    "B",                            # flake8-bugbear                | Check likely bugs and design problems
    "A",                            # flake8-builtins               | Python builtins being used as variables or parameters
    "C4",                           # flake8-comprehensions         | Better list/set/dict comprehensions
    "T10",                          # flake8-debugger               | Presence of debugger calls and imports
    "FA",                           # flake8-future-annotations     | Verify code can use from `__future__ import annotations`
    "ISC",                          # flake8-implicit-str-concat    | Correct string literal concatenation
    "ICN",                          # flake8-import-conventions     | Import conventions, e.g. `pandas as pd`
    "LOG",                          # flake8-logging                | Issues using the standard library logging module
    "G",                            # flake8-logging-format         | Validate (lack of) logging format strings
    "INP",                          # flake8-no-pep420              | Ban PEP-420 implicit namespace packages
    "PIE",                          # flake8-pie                    | Miscellaneous linting
    "PT",                           # flake8-pytest-style           | Enforce Pytest standards
    "RSE",                          # flake8-raise                  | Improvements for raise statements
    "RET",                          # flake8-return                 | Check return values
    "SIM",                          # flake8-simplify               | Simplify code, e.g. checking superfluous code
    "TID",                          # flake8-tidy-imports           | Tidier imports
    "TCH",                          # flake8-type-checking          | Check imports to move in or out of type-checking blocks
    "ARG",                          # flake8-unused-arguments       | Unused function arguments
    "PTH",                          # flake8-use-pathlib            | Prefer pathlib over os, where possible
    "TD",                           # flake8-todos                  | Check valid TODO structure
    "ERA",                          # eradicate                     | Remove commented out code
    "PGH",                          # pygrep-hooks                  | Regex based pre-commit hooks
    "PL",                           # pylint                        | Enforces a coding standard, looks for code smells, and suggestions about possible refactors
    "TRY",                          # tryceratops                   | Exception handling antipatterns
    "FLY",                          # flynt                         | `str.join` calls that can be replaced with f-strings
    "PERF",                         # perflint                      | Performance antipatterns
    "FURB",                         # refurb                        | Refurbish and modernize Python codebases
    "RUF",                          # ruff                          | Miscellaneous linting
]
extend-ignore = ["D100"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D", "ANN"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions", "types"]
quote-annotations = true
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 8

{% if cookiecutter.codecov == "y"-%}
[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.project_slug}}"]
{% endif%}
